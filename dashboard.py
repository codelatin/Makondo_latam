import streamlit as st
import requests
import pandas as pd
import plotly.express as px

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Dashboard de Audios",
    page_icon="üéµ",
    layout="wide"
)

# Configuraci√≥n de la API
API_BASE_URL = "http://127.0.0.1:8000"

def get_audio_stats(periodo='total', limit=10):
    """Obtiene estad√≠sticas de audios desde la API"""
    # apunto a la URL correcta de Mi Api Rest
    url = f"{API_BASE_URL}/api/audios/stats/mas_reproducidos/"  
    try:
        response = requests.get(url, params={'periodo': periodo, 'limit': limit})
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"‚ùå Error {response.status_code}: No se pudo obtener los datos de la API.")
            st.error(f"URL intentada: {url}")
            return []
    except requests.exceptions.ConnectionError:
        st.error("üîå No se pudo conectar con la API. ¬øEst√° corriendo el servidor Django?")
        st.error(f"URL intentada: {url}")
        return []
    except Exception as e:
        st.error(f"‚ö†Ô∏è Error inesperado al conectar con la API: {e}")
        return []
def get_all_audios():
    """Obtiene todos los audios desde la API"""
    url = f"{API_BASE_URL}/api/audios/"  # debo asegurarme de que este endpoint exista
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"‚ùå Error {response.status_code}: No se pudo obtener la lista de audios.")
            return []
    except Exception as e:
        st.error(f"‚ö†Ô∏è Error al obtener audios: {e}")
        return []

# T√≠tulo principal
st.title("üéµ Dashboard de An√°lisis de Audios")
st.markdown("---")

# Sidebar para filtros
st.sidebar.header("Filtros")
periodo = st.sidebar.selectbox(
    "Per√≠odo de an√°lisis:",
    ["total", "mes", "semana"],
    format_func=lambda x: {"total": "Todo el tiempo", "mes": "√öltimo mes", "semana": "√öltima semana"}[x]
)
limite_audios = st.sidebar.slider("N√∫mero de audios a mostrar:", 1, 50, 10)

# M√©tricas principales
col1, col2, col3, col4 = st.columns(4)

# Obtengo los  datos
audios_data = get_audio_stats(periodo, limite_audios)

if audios_data:
    df = pd.DataFrame(audios_data)

    # Verifico  que los campos existan antes de usarlos
    campo_reproducciones = 'total_reproducciones' if periodo == 'total' else f'reproducciones_{periodo}'
    if campo_reproducciones not in df.columns:
        st.error(f"üö´ El campo '{campo_reproducciones}' no existe en los datos recibidos.")
        st.write("Campos disponibles:", list(df.columns))
        st.stop()

    # Calcular m√©tricas
    total_reproducciones = df[campo_reproducciones].sum()
    audio_mas_popular = df.iloc[0]['titulo'] if len(df) > 0 else "N/A"
    
    #  Aqu√≠ puedo  cambiaar  a 'artista' si el  modelo lo usa
    interprete_mas_popular = df['interprete'].mode()[0] if 'interprete' in df.columns and len(df) > 0 else "N/A"
    promedio_reproducciones = df[campo_reproducciones].mean()

    with col1:
        st.metric("Total Reproducciones", f"{total_reproducciones:,}")

    with col2:
        st.metric("Audio M√°s Popular", audio_mas_popular)

    with col3:
        st.metric("Int√©rprete M√°s Popular", interprete_mas_popular)

    with col4:
        st.metric("Promedio por Audio", f"{promedio_reproducciones:.1f}")

    st.markdown("---")

    # Gr√°ficos principales
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üî• Top Audios M√°s Reproducidos")

        df_top = df.head(10).copy()
        df_top['titulo_corto'] = df_top['titulo'].apply(lambda x: x[:30] + '...' if len(x) > 30 else x)

        fig_bar = px.bar(
            df_top,
            x=campo_reproducciones,
            y='titulo_corto',
            orientation='h',
            title=f"Reproducciones ({periodo})",
            color=campo_reproducciones,
            color_continuous_scale='viridis'
        )
        fig_bar.update_layout(height=500, yaxis={'categoryorder': 'total ascending'})
        st.plotly_chart(fig_bar, use_container_width=True)

    with col2:
        st.subheader("üé≠ Distribuci√≥n por Int√©rprete")

        if 'interprete' in df.columns:
            interprete_stats = df.groupby('interprete')[campo_reproducciones].sum().sort_values(ascending=False).head(8)
            fig_pie = px.pie(
                values=interprete_stats.values,
                names=interprete_stats.index,
                title="Reproducciones por Int√©rprete"
            )
            fig_pie.update_layout(height=500)
            st.plotly_chart(fig_pie, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è No hay informaci√≥n disponible sobre los int√©rpretes.")

    # Tabla detallada
    st.subheader("üìä Tabla Detallada")

    df_display = df.copy()
    df_display = df_display.rename(columns={
        'titulo': 'T√≠tulo',
        'interprete': 'Int√©rprete',
        'compositor': 'Compositor',
        'total_reproducciones': 'Total',
        'reproducciones_mes': '√öltimo Mes',
        'reproducciones_semana': '√öltima Semana'
    })

    # Mostrar columnas relevantes seg√∫n el per√≠odo
    if periodo == 'total':
        columns_to_show = ['T√≠tulo', 'Int√©rprete', 'Compositor', 'Total']
    elif periodo == 'mes':
        columns_to_show = ['T√≠tulo', 'Int√©rprete', 'Compositor', '√öltimo Mes', 'Total']
    else:
        columns_to_show = ['T√≠tulo', 'Int√©rprete', 'Compositor', '√öltima Semana', 'Total']

    existing_columns = [col for col in columns_to_show if col in df_display.columns]

    st.dataframe(
        df_display[existing_columns],
        use_container_width=True,
        hide_index=True
    )

    # An√°lisis adicionales
    st.markdown("---")
    st.subheader("üìà An√°lisis Adicional")

    col1, col2 = st.columns(2)

    with col1:
        st.write("**Top 5 Compositores:**")
        if 'compositor' in df.columns:
            compositor_stats = df.groupby('compositor')[campo_reproducciones].sum().sort_values(ascending=False).head(5)
            for compositor, reproducciones in compositor_stats.items():
                st.write(f"‚Ä¢ {compositor}: {reproducciones:,} reproducciones")
        else:
            st.write("No hay informaci√≥n sobre compositores.")

    with col2:
        st.write("**Estad√≠sticas Generales:**")
        st.write(f"‚Ä¢ Total de audios analizados: {len(df)}")
        st.write(f"‚Ä¢ Reproducci√≥n m√°xima: {df[campo_reproducciones].max():,}")
        st.write(f"‚Ä¢ Reproducci√≥n m√≠nima: {df[campo_reproducciones].min():,}")
        st.write(f"‚Ä¢ Desviaci√≥n est√°ndar: {df[campo_reproducciones].std():.1f}")

else:
    st.warning("‚ö†Ô∏è No se pudieron cargar los datos. Verifica la conexi√≥n con la API.")
    st.info("Aseg√∫rate de que tu servidor Django est√© ejecut√°ndose y los endpoints est√©n configurados correctamente.")

    if st.button("üß™ Probar conexi√≥n con API"):
        st.write("Probando conexi√≥n...")
        audios_basicos = get_all_audios()
        if audios_basicos:
            st.success(f"‚úÖ Conexi√≥n exitosa! Se encontraron {len(audios_basicos)} audios.")
            st.write("Ejemplo de datos:", audios_basicos[0] if audios_basicos else "No hay datos")
        else:
            st.error("‚ùå No se pudo conectar con la API b√°sica.")

# Bot√≥n de actualizaci√≥n
if st.button("üîÑ Actualizar Datos"):
    st.rerun()

# Footer
st.markdown("---")
st.markdown("*Dashboard actualizado autom√°ticamente desde tu API de Django*")